D:\Tools made by me\YouTubeShortsTool\youtube_short_creator
-----------------------------------------------------------
main.py:
```python
# main.py

import os
import sys
import yaml
import subprocess
import logging
from scripts.script_processor import process_script
from scripts.prompt_generator import generate_prompts
from scripts.image_generator import list_available_models, list_available_loras, generate_image
from scripts.image_editor import enhance_image
from scripts.video_assembler import assemble_video

def load_config(config_path):
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        return config
    except Exception as e:
        logging.error(f"Error loading config: {e}")
        return {}

def get_user_input(prompt_text, default=None):
    if default:
        prompt = f"{prompt_text} [{default}]: "
    else:
        prompt = f"{prompt_text}: "
    response = input(prompt).strip()
    if not response and default is not None:
        return default
    return response

def select_from_list(options, prompt_text):
    if not options:
        print("No options available.")
        return None
    print(f"\n{prompt_text}:")
    for idx, option in enumerate(options, 1):
        print(f"{idx}. {option}")
    while True:
        try:
            choice = int(input("Enter the number of your choice: ").strip())
            if 1 <= choice <= len(options):
                return options[choice - 1]
            else:
                print(f"Please enter a number between 1 and {len(options)}.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def main():
    # Configure logging
    logging.basicConfig(
        filename=os.path.join("logs", "app.log"),
        filemode='a',
        format='%(asctime)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    # Parse command-line arguments or ask for input
    if len(sys.argv) == 3:
        script_path = sys.argv[1]
        audio_path = sys.argv[2]
    else:
        print("Welcome to the YouTube Shorts Automation Tool!")
        script_path = get_user_input("Enter the path to your script file (e.g., scripts/my_video_script.txt)")
        audio_path = get_user_input("Enter the path to your audio narration file (e.g., audio/narration.mp3)")

    # Validate paths
    if not os.path.isfile(script_path):
        print(f"Script file not found: {script_path}")
        sys.exit(1)
    if not os.path.isfile(audio_path):
        print(f"Audio file not found: {audio_path}")
        sys.exit(1)

    # Load config
    base_path = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(base_path, "config", "config.yaml")
    config = load_config(config_path)
    if not config:
        print("Failed to load configuration. Check logs for details.")
        sys.exit(1)

    # List available models and LoRAs
    models_dir = os.path.join(base_path, config.get('models_directory', 'models'))
    loras_dir = os.path.join(base_path, config.get('loras_directory', 'loras'))
    available_models = list_available_models(models_dir)
    available_loras = list_available_loras(loras_dir)

    # Process script
    key_points, characters = process_script(script_path, config)
    if not key_points:
        print("No key points extracted from the script. Exiting.")
        sys.exit(1)
    if not characters:
        print("No characters extracted from the script. Proceeding without character consistency.")
    
    # Display key points and characters
    print("\nKey Points:")
    for idx, point in enumerate(key_points, 1):
        print(f"{idx}. {point}")
    
    print("\nCharacters:")
    for idx, char in enumerate(characters, 1):
        print(f"{idx}. {char}")
    
    # Let user choose style
    style = get_user_input("Enter the style you want for the images (e.g., comics, illustration)", default=config.get('default_style', 'comics'))

    # Let user select model
    selected_model = select_from_list(available_models, "Select the Stable Diffusion model you want to use")
    if not selected_model:
        print("No models available. Exiting.")
        sys.exit(1)
    config['sd_model'] = selected_model  # Update config if necessary

    # Let user select LoRA
    selected_lora = select_from_list(available_loras, "Select the LoRA you want to use")
    if not selected_lora:
        print("No LoRAs available. Proceeding without LoRA.")
    else:
        config['lora_model'] = selected_lora

    # Generate prompts
    print("\nGenerating prompts based on key points...")
    prompts = generate_prompts(key_points, config)
    if not prompts:
        print("Failed to generate prompts. Exiting.")
        sys.exit(1)
    
    # Display prompts
    print("\nGenerated Prompts:")
    for idx, prompt in enumerate(prompts, 1):
        print(f"{idx}. {prompt}")
    print(f"\nNumber of images to be generated: {len(prompts)}")
    
    # Get user approval
    approval = get_user_input("Do you approve the prompts and settings? (yes/no)", default="yes").lower()
    if approval not in ['yes', 'y']:
        print("Operation cancelled by the user.")
        sys.exit(0)
    
    # Generate images
    image_dir = os.path.join(base_path, "outputs", "images")
    os.makedirs(image_dir, exist_ok=True)
    image_paths = []
    for idx, prompt in enumerate(prompts, 1):
        image_path = os.path.join(image_dir, f"image_{idx}.png")
        print(f"Generating image {idx}/{len(prompts)}...")
        success = generate_image(prompt, config, image_path, model=selected_model, lora=selected_lora, style=style)
        if success:
            # Enhance image
            enhanced_path = os.path.join(image_dir, f"enhanced_image_{idx}.png")
            enhance_image(image_path, enhanced_path)
            image_paths.append(enhanced_path)
        else:
            print(f"Failed to generate image for prompt {idx}. Skipping.")
    
    if not image_paths:
        print("No images were successfully generated. Exiting.")
        sys.exit(1)
    
    # Assemble video
    video_output_dir = os.path.join(base_path, "outputs", "videos")
    os.makedirs(video_output_dir, exist_ok=True)
    output_video_path = os.path.join(video_output_dir, "output_video.mp4")
    print("Assembling video...")
    video = assemble_video(image_paths, audio_path, output_video_path, config)
    if video:
        print(f"Video created successfully at {video}")
    else:
        print("Failed to assemble video. Check logs for details.")

if __name__ == "__main__":
    main()
```

D:\Tools made by me\YouTubeShortsTool\youtube_short_creator\audio
-----------------------------------------------------------------


D:\Tools made by me\YouTubeShortsTool\youtube_short_creator\config
------------------------------------------------------------------


D:\Tools made by me\YouTubeShortsTool\youtube_short_creator\logs
----------------------------------------------------------------


D:\Tools made by me\YouTubeShortsTool\youtube_short_creator\outputs
-------------------------------------------------------------------


D:\Tools made by me\YouTubeShortsTool\youtube_short_creator\outputs\images
--------------------------------------------------------------------------


D:\Tools made by me\YouTubeShortsTool\youtube_short_creator\outputs\videos
--------------------------------------------------------------------------


D:\Tools made by me\YouTubeShortsTool\youtube_short_creator\scripts
-------------------------------------------------------------------
image_editor.py:
```python
# scripts/image_editor.py

from PIL import Image, ImageEnhance
import logging

def enhance_image(image_path, output_path):
    try:
        image = Image.open(image_path)
        # Example enhancements
        enhancer = ImageEnhance.Brightness(image)
        image = enhancer.enhance(1.2)
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(1.3)
        image.save(output_path)
        logging.info(f"Enhanced image saved to {output_path}.")
        return output_path
    except Exception as e:
        logging.error(f"Error enhancing image '{image_path}': {e}")
        return image_path  # Return original if enhancement fails

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 3:
        print("Usage: python image_editor.py <input_image_path> <output_image_path>")
        sys.exit(1)
    input_image = sys.argv[1]
    output_image = sys.argv[2]
    enhanced_image = enhance_image(input_image, output_image)
    print(f"Enhanced image saved to {enhanced_image}")
```

image_generator.py:
```python
# scripts/image_generator.py

import yaml
import requests
import os
import logging
import base64

def load_config(config_path):
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        return config
    except Exception as e:
        logging.error(f"Error loading config: {e}")
        return {}

def list_available_models(models_directory):
    try:
        models = [f for f in os.listdir(models_directory) if f.endswith('.ckpt') or f.endswith('.safetensors')]
        return models
    except Exception as e:
        logging.error(f"Error listing models: {e}")
        return []

def list_available_loras(loras_directory):
    try:
        loras = [f for f in os.listdir(loras_directory) if f.endswith('.ckpt') or f.endswith('.safetensors')]
        return loras
    except Exception as e:
        logging.error(f"Error listing LoRAs: {e}")
        return []

def generate_image(prompt, config, output_path, model=None, lora=None, style=None):
    try:
        payload = {
            "prompt": prompt,
            "steps": 20,  # Example steps
            "cfg_scale": 7.0,  # Example cfg scale
            "width": 512,
            "height": 512,
            "sampler_index": "Euler a",  # Example sampler
            "seed": -1,  # Random seed
            "negative_prompt": "",
        }
        if model:
            payload["model"] = model
        if lora:
            payload["lora"] = lora
        # Include style in the prompt if necessary
        if style:
            payload["prompt"] += f", style of {style}"
        
        logging.info(f"Sending request to Stable Diffusion API with prompt: {prompt}")
        response = requests.post(
            f"{config['automatic1111_api']}/sdapi/v1/txt2img",
            json=payload
        )
        response.raise_for_status()
        data = response.json()
        # Assuming the API returns images as base64-encoded strings
        image_data = data['images'][0]
        image_bytes = base64.b64decode(image_data)
        with open(output_path, "wb") as f:
            f.write(image_bytes)
        logging.info(f"Image generated and saved to {output_path}.")
        return True
    except Exception as e:
        logging.error(f"Failed to generate image for prompt '{prompt}': {e}")
        return False

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 6:
        print("Usage: python image_generator.py <config_path> <prompt> <output_path> <model> <lora>")
        sys.exit(1)
    config_path = sys.argv[1]
    prompt = sys.argv[2]
    output_path = sys.argv[3]
    model = sys.argv[4]
    lora = sys.argv[5]
    config = load_config(config_path)
    success = generate_image(prompt, config, output_path, model=model, lora=lora)
    if success:
        print(f"Image saved to {output_path}")
    else:
        print("Image generation failed.")
```

main.py:
```python
# main.py

import os
import sys
import yaml
import subprocess
import logging
from scripts.script_processor import process_script
from scripts.prompt_generator import generate_prompts
from scripts.image_generator import list_available_models, list_available_loras, generate_image
from scripts.image_editor import enhance_image
from scripts.video_assembler import assemble_video

def load_config(config_path):
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        return config
    except Exception as e:
        logging.error(f"Error loading config: {e}")
        return {}

def get_user_input(prompt_text, default=None):
    if default:
        prompt = f"{prompt_text} [{default}]: "
    else:
        prompt = f"{prompt_text}: "
    response = input(prompt).strip()
    if not response and default is not None:
        return default
    return response

def select_from_list(options, prompt_text):
    if not options:
        print("No options available.")
        return None
    print(f"\n{prompt_text}:")
    for idx, option in enumerate(options, 1):
        print(f"{idx}. {option}")
    while True:
        try:
            choice = int(input("Enter the number of your choice: ").strip())
            if 1 <= choice <= len(options):
                return options[choice - 1]
            else:
                print(f"Please enter a number between 1 and {len(options)}.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def main():
    # Configure logging
    logging.basicConfig(
        filename=os.path.join("logs", "app.log"),
        filemode='a',
        format='%(asctime)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

    # Parse command-line arguments or ask for input
    if len(sys.argv) == 3:
        script_path = sys.argv[1]
        audio_path = sys.argv[2]
    else:
        print("Welcome to the YouTube Shorts Automation Tool!")
        script_path = get_user_input("Enter the path to your script file (e.g., scripts/my_video_script.txt)")
        audio_path = get_user_input("Enter the path to your audio narration file (e.g., audio/narration.mp3)")

    # Validate paths
    if not os.path.isfile(script_path):
        print(f"Script file not found: {script_path}")
        sys.exit(1)
    if not os.path.isfile(audio_path):
        print(f"Audio file not found: {audio_path}")
        sys.exit(1)

    # Load config
    base_path = os.path.dirname(os.path.abspath(__file__))
    config_path = os.path.join(base_path, "config", "config.yaml")
    config = load_config(config_path)
    if not config:
        print("Failed to load configuration. Check logs for details.")
        sys.exit(1)

    # List available models and LoRAs
    models_dir = os.path.join(base_path, config.get('models_directory', 'models'))
    loras_dir = os.path.join(base_path, config.get('loras_directory', 'loras'))
    available_models = list_available_models(models_dir)
    available_loras = list_available_loras(loras_dir)

    # Process script
    key_points, characters = process_script(script_path, config)
    if not key_points:
        print("No key points extracted from the script. Exiting.")
        sys.exit(1)
    if not characters:
        print("No characters extracted from the script. Proceeding without character consistency.")
    
    # Display key points and characters
    print("\nKey Points:")
    for idx, point in enumerate(key_points, 1):
        print(f"{idx}. {point}")
    
    print("\nCharacters:")
    for idx, char in enumerate(characters, 1):
        print(f"{idx}. {char}")
    
    # Let user choose style
    style = get_user_input("Enter the style you want for the images (e.g., comics, illustration)", default=config.get('default_style', 'comics'))

    # Let user select model
    selected_model = select_from_list(available_models, "Select the Stable Diffusion model you want to use")
    if not selected_model:
        print("No models available. Exiting.")
        sys.exit(1)
    config['sd_model'] = selected_model  # Update config if necessary

    # Let user select LoRA
    selected_lora = select_from_list(available_loras, "Select the LoRA you want to use")
    if not selected_lora:
        print("No LoRAs available. Proceeding without LoRA.")
    else:
        config['lora_model'] = selected_lora

    # Generate prompts
    print("\nGenerating prompts based on key points...")
    prompts = generate_prompts(key_points, config)
    if not prompts:
        print("Failed to generate prompts. Exiting.")
        sys.exit(1)
    
    # Display prompts
    print("\nGenerated Prompts:")
    for idx, prompt in enumerate(prompts, 1):
        print(f"{idx}. {prompt}")
    print(f"\nNumber of images to be generated: {len(prompts)}")
    
    # Get user approval
    approval = get_user_input("Do you approve the prompts and settings? (yes/no)", default="yes").lower()
    if approval not in ['yes', 'y']:
        print("Operation cancelled by the user.")
        sys.exit(0)
    
    # Generate images
    image_dir = os.path.join(base_path, "outputs", "images")
    os.makedirs(image_dir, exist_ok=True)
    image_paths = []
    for idx, prompt in enumerate(prompts, 1):
        image_path = os.path.join(image_dir, f"image_{idx}.png")
        print(f"Generating image {idx}/{len(prompts)}...")
        success = generate_image(prompt, config, image_path, model=selected_model, lora=selected_lora, style=style)
        if success:
            # Enhance image
            enhanced_path = os.path.join(image_dir, f"enhanced_image_{idx}.png")
            enhance_image(image_path, enhanced_path)
            image_paths.append(enhanced_path)
        else:
            print(f"Failed to generate image for prompt {idx}. Skipping.")
    
    if not image_paths:
        print("No images were successfully generated. Exiting.")
        sys.exit(1)
    
    # Assemble video
    video_output_dir = os.path.join(base_path, "outputs", "videos")
    os.makedirs(video_output_dir, exist_ok=True)
    output_video_path = os.path.join(video_output_dir, "output_video.mp4")
    print("Assembling video...")
    video = assemble_video(image_paths, audio_path, output_video_path, config)
    if video:
        print(f"Video created successfully at {video}")
    else:
        print("Failed to assemble video. Check logs for details.")

if __name__ == "__main__":
    main()
```

prompt_generator.py:
```python
# scripts/prompt_generator.py

import yaml
import subprocess
import logging

def load_config(config_path):
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        return config
    except Exception as e:
        logging.error(f"Error loading config: {e}")
        return {}

def generate_prompts(key_points, config):
    prompts = []
    for point in key_points:
        try:
            # Use LLM to generate image prompt for the key point
            prompt_text = f"Generate a detailed image prompt for the following key point: {point}"
            command = ["ollama", "run", "hf.co/ArliAI/Mistral-Small-22B-ArliAI-RPMax-v1.1-GGUF:latest", prompt_text]
            logging.info(f"Running LLM command for prompt generation: {' '.join(command)}")
            result = subprocess.run(command, capture_output=True, text=True)
            if result.returncode != 0:
                logging.error(f"LLM command failed for key point '{point}': {result.stderr}")
                prompts.append(f"Image for: {point}")
                continue
            output = result.stdout.strip()
            prompts.append(output)
            logging.info(f"Generated prompt: {output}")
        except Exception as e:
            logging.error(f"Error generating prompt for key point '{point}': {e}")
            prompts.append(f"Image for: {point}")
    return prompts

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 4:
        print("Usage: python prompt_generator.py <config_path> <script_path> <output_prompts_file>")
        sys.exit(1)
    config_path = sys.argv[1]
    script_path = sys.argv[2]
    output_prompts_file = sys.argv[3]
    from script_processor import process_script
    config = load_config(config_path)
    key_points, _ = process_script(script_path, config)
    prompts = generate_prompts(key_points, config)
    with open(output_prompts_file, 'w') as f:
        for prompt in prompts:
            f.write(f"{prompt}\n")
    print(prompts)
```

script_processor.py:
```python
# scripts/script_processor.py

import yaml
import subprocess
import logging

def load_config(config_path):
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        return config
    except Exception as e:
        logging.error(f"Error loading config: {e}")
        return {}

def process_script(script_path, config):
    try:
        with open(script_path, 'r') as f:
            script = f.read()
        # Use LLM to process the script
        prompt = f"Analyze the following script and list the key points and characters:\n\n{script}"
        # Command to run Ollama with Mistral
        command = ["ollama", "run", "hf.co/ArliAI/Mistral-Small-22B-ArliAI-RPMax-v1.1-GGUF:latest", prompt]
        logging.info(f"Running LLM command: {' '.join(command)}")
        result = subprocess.run(command, capture_output=True, text=True)
        if result.returncode != 0:
            logging.error(f"LLM command failed: {result.stderr}")
            return [], []
        output = result.stdout.strip()
        # Parse the output to extract key points and characters
        key_points = []
        characters = []
        current_section = None
        for line in output.split('\n'):
            line = line.strip()
            if line.lower().startswith('key points'):
                current_section = 'key_points'
                continue
            elif line.lower().startswith('characters'):
                current_section = 'characters'
                continue
            elif line.startswith('-') or line.startswith('1.') or line.startswith('*'):
                item = line.lstrip('-*0123456789. ').strip()
                if current_section == 'key_points':
                    key_points.append(item)
                elif current_section == 'characters':
                    characters.append(item)
        logging.info(f"Extracted {len(key_points)} key points and {len(characters)} characters.")
        return key_points, characters
    except Exception as e:
        logging.error(f"Error processing script: {e}")
        return [], []

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 3:
        print("Usage: python script_processor.py <config_path> <script_path>")
        sys.exit(1)
    config_path = sys.argv[1]
    script_path = sys.argv[2]
    config = load_config(config_path)
    key_points, characters = process_script(script_path, config)
    print("Key Points:")
    for point in key_points:
        print(f"- {point}")
    print("\nCharacters:")
    for char in characters:
        print(f"- {char}")
```

video_assembler.py:
```python
# scripts/video_assembler.py

import yaml
from moviepy.editor import ImageClip, AudioFileClip, concatenate_videoclips
import logging
import os

def load_config(config_path):
    try:
        with open(config_path, 'r') as f:
            config = yaml.safe_load(f)
        return config
    except Exception as e:
        logging.error(f"Error loading config: {e}")
        return {}

def assemble_video(image_paths, audio_path, output_path, config):
    try:
        audio = AudioFileClip(audio_path)
        duration = audio.duration
        num_images = len(image_paths)
        if num_images == 0:
            logging.error("No images provided for video assembly.")
            return None
        clip_duration = duration / num_images
        clips = []
        for img_path in image_paths:
            clip = ImageClip(img_path).set_duration(clip_duration)
            clips.append(clip)
        video = concatenate_videoclips(clips, method="compose")
        video = video.set_audio(audio)
        video.write_videofile(output_path, codec="libx264", audio_codec="aac")
        logging.info(f"Video assembled and saved to {output_path}.")
        return output_path
    except Exception as e:
        logging.error(f"Error assembling video: {e}")
        return None

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 5:
        print("Usage: python video_assembler.py <config_path> <image_paths_file> <audio_path> <output_video_path>")
        sys.exit(1)
    config_path = sys.argv[1]
    image_paths_file = sys.argv[2]
    audio_path = sys.argv[3]
    output_video_path = sys.argv[4]
    try:
        with open(image_paths_file, 'r') as f:
            image_paths = [line.strip() for line in f.readlines()]
        config = load_config(config_path)
        video = assemble_video(image_paths, audio_path, output_video_path, config)
        if video:
            print(f"Video saved to {video}")
        else:
            print("Video assembly failed.")
    except Exception as e:
        logging.error(f"Error reading image paths file: {e}")
        print("Failed to read image paths file.")
```

__init__.py:
```python
# scripts/__init__.py

# This file is intentionally left blank to make 'scripts' a Python package.
```



D:\Tools made by me\YouTubeShortsTool\youtube_short_creator\scripts\__pycache__
-------------------------------------------------------------------------------


D:\Tools made by me\YouTubeShortsTool\youtube_short_creator\story
-----------------------------------------------------------------


